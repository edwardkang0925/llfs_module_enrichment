library("WebGestaltR")
listGeneSet(organism='hsapiens')
packages.install('biomaRt')
package.install('biomaRt')
install.packages('biomaRt')
ensembl=useEnsembl(biomart="ensembl", dataset='hsapiens_gene_ensembl')
library(WebGestaltR)
library(biomaRt)
BiocManager::install('biomaRt')
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(WebGestaltR)
library(biomaRt)
listGeneSet(organism="hsapiens")
ensembl=useEnsembl(biomart="ensembl", dataset='hsapiens_gene_ensembl')
getBM(attributes = c('ensembl_gene_id','external_gene_name', 'go_parent_term', 'name_1006'),
filters = 'go',
values = 'GO:1904469',
mart = ensembl)
listAttributes()
?getBM
listAttributes(mart=ensembl)
getBM(attributes = c('ensembl_gene_id','external_gene_name'),
filters = 'go',
values = 'GO:1904469',
mart = ensembl)
getBM(attributes = c('hgnc_symbol'),
filters = 'go',
values = 'GO:1904469',
mart = ensembl)
getBM(attributes = c('hgnc_symbol'),
filters = 'go',
values = 'GO:0030098',
mart = ensembl)
?WebGestaltR
?tapply
?filter
listGeneSet(organism='hsapiens')
loadGeneSet(organism='hsapiens', enrichDatabase = "geneontology_Biological_Process")
bp_database <- loadGeneSet(organism='hsapiens', enrichDatabase = "geneontology_Biological_Process")
geneSet <- bp_database$geneSet
geneSet
?mapUserId
??mapUserId
?WebGestaltR
listIDType()
bp_database <- loadGeneSet(organism='hsapiens', enrichDatabase = "geneontology_Biological_Process")
geneSet <- bp_database$geneSet # each row is a go term. gene column has int gene id. Seems I need to use mapUserId() to get member genes.
# [loadInterestGene](https://github.com/bzhanglab/WebGestaltR/blob/55d47be3843735cc9bf90f76706026d8a68a98e0/R/loadGeneList.R)
# [mapUserId](https://github.com/bzhanglab/WebGestaltR/blob/5c75381918ce9e2bf78f9d4a0f9d66d118ad02b8/R/reportUtils.R)
GENE_ID="genesymbol" # see options with listIdType()
interestingGeneMap <- loadInterestGene(organism='hsapiens',
dataType="list",
inputGeneFile='/Users/test/projects/llfs_module_enrichment/outputs/parsedPascalOutput/twas/BMI/significant/twas_BMI_coexpression_66.txt',
geneType=GENE_ID,
geneSet=geneSet)
interestingGeneMap <- WebGestaltR::loadInterestGene(organism='hsapiens',
dataType="list",
inputGeneFile='/Users/test/projects/llfs_module_enrichment/outputs/parsedPascalOutput/twas/BMI/significant/twas_BMI_coexpression_66.txt',
geneType=GENE_ID,
geneSet=geneSet)
### WebGestaltR source code
.uploadGeneExistingOrganism <- function(organism, dataType, inputGeneFile, inputGene, geneType, collapseMethod, geneSet, cache, hostName) {
geneMap <- idMapping(organism=organism, dataType=dataType, inputGeneFile=inputGeneFile, inputGene=inputGene, sourceIdType=geneType, targetIdType=NULL, collapseMethod=collapseMethod, mappingOutput=FALSE, cache=cache, hostName=hostName)
#gene_standardId <- identifyStandardId(hostName=hostName,idtype=geneType,organism=organism,type="interest")  ##identifyStandardId in idMappingComponent.R
#if(gene_standardId!=databaseStandardId){  ###the standardId of the input genes should be the same with the standardarId of the functional database
#	return(interestGeneError(type="unmatch"))
#}
geneMapMappedList <- geneMap$mapped
standardId <- geneMap$standardId
geneList <- as.character(unique(geneMapMappedList[[standardId]]))
ov <- intersect(geneList, geneSet$gene)
if (length(ov)==0) {
stop(interestGeneError(type="unannotated"))
}
###Because if all genes are annotated to only one category, GSEA will return the error, we need to avoid this error by reporting the error in the R#
geneSets <- unique((filter(geneSet, .data$gene %in% geneList))[["geneSet"]])
if (length(geneSets) == 1) {
stop(interestGeneError(type="onlyOne"))
}
return(geneMap)
}
loadInterestGene <- function(organism="hsapiens", dataType="list", inputGeneFile=NULL, inputGene=NULL, geneType="entrezgene", collapseMethod="mean", cache=NULL, hostName="https://www.webgestalt.org/", geneSet) {
if (is.null(inputGeneFile) && is.null(inputGene)) {
stop(interestGeneError(type="empty"))
} else {
if (organism!="others") {
if (is.null(geneType)) {
stop(interestGeneError(type="emptyType"))
} else {
mapRe <- .uploadGeneExistingOrganism(organism=organism, dataType=dataType, inputGeneFile=inputGeneFile, inputGene=inputGene, geneType=geneType, collapseMethod=collapseMethod, geneSet=geneSet, cache=cache, hostName=hostName)
}
} else {
mapRe <- .uploadGeneOthers(dataType=dataType, inputGeneFile=inputGeneFile, inputGene=inputGene, geneSet=geneSet)
}
}
#if organism is not others, the function will return a mapping result with mapped and unmapped list
#if organism is others, the function will return a matrix with gene list
return(mapRe)
}
interestingGeneMap <- loadInterestGene(organism='hsapiens',
dataType="list",
inputGeneFile='/Users/test/projects/llfs_module_enrichment/outputs/parsedPascalOutput/twas/BMI/significant/twas_BMI_coexpression_66.txt',
geneType=GENE_ID,
geneSet=geneSet)
library(dplyr)
library(WebGestaltR)
library(biomaRt)
setwd("/Users/test/projects/llfs_module_enrichment")
listGeneSet(organism="hsapiens")
ensembl=useEnsembl(biomart="ensembl", dataset='hsapiens_gene_ensembl')
getBM(attributes = c('hgnc_symbol'),
filters = 'go',
values = 'GO:0030098',
mart = ensembl)
### WebGestaltR source code
#' @importFrom dplyr filter
.uploadGeneExistingOrganism <- function(organism, dataType, inputGeneFile, inputGene, geneType, collapseMethod, geneSet, cache, hostName) {
geneMap <- idMapping(organism=organism, dataType=dataType, inputGeneFile=inputGeneFile, inputGene=inputGene, sourceIdType=geneType, targetIdType=NULL, collapseMethod=collapseMethod, mappingOutput=FALSE, cache=cache, hostName=hostName)
#gene_standardId <- identifyStandardId(hostName=hostName,idtype=geneType,organism=organism,type="interest")  ##identifyStandardId in idMappingComponent.R
#if(gene_standardId!=databaseStandardId){  ###the standardId of the input genes should be the same with the standardarId of the functional database
#	return(interestGeneError(type="unmatch"))
#}
geneMapMappedList <- geneMap$mapped
standardId <- geneMap$standardId
geneList <- as.character(unique(geneMapMappedList[[standardId]]))
ov <- intersect(geneList, geneSet$gene)
if (length(ov)==0) {
stop(interestGeneError(type="unannotated"))
}
###Because if all genes are annotated to only one category, GSEA will return the error, we need to avoid this error by reporting the error in the R#
geneSets <- unique((filter(geneSet, .data$gene %in% geneList))[["geneSet"]])
if (length(geneSets) == 1) {
stop(interestGeneError(type="onlyOne"))
}
return(geneMap)
}
loadInterestGene <- function(organism="hsapiens", dataType="list", inputGeneFile=NULL, inputGene=NULL, geneType="entrezgene", collapseMethod="mean", cache=NULL, hostName="https://www.webgestalt.org/", geneSet) {
if (is.null(inputGeneFile) && is.null(inputGene)) {
stop(interestGeneError(type="empty"))
} else {
if (organism!="others") {
if (is.null(geneType)) {
stop(interestGeneError(type="emptyType"))
} else {
mapRe <- .uploadGeneExistingOrganism(organism=organism, dataType=dataType, inputGeneFile=inputGeneFile, inputGene=inputGene, geneType=geneType, collapseMethod=collapseMethod, geneSet=geneSet, cache=cache, hostName=hostName)
}
} else {
mapRe <- .uploadGeneOthers(dataType=dataType, inputGeneFile=inputGeneFile, inputGene=inputGene, geneSet=geneSet)
}
}
#if organism is not others, the function will return a mapping result with mapped and unmapped list
#if organism is others, the function will return a matrix with gene list
return(mapRe)
}
bp_database <- loadGeneSet(organism='hsapiens', enrichDatabase = "geneontology_Biological_Process")
geneSet <- bp_database$geneSet # each row is a go term. gene column has int gene id. Seems I need to use mapUserId() to get member genes.
# [loadInterestGene](https://github.com/bzhanglab/WebGestaltR/blob/55d47be3843735cc9bf90f76706026d8a68a98e0/R/loadGeneList.R)
# [mapUserId](https://github.com/bzhanglab/WebGestaltR/blob/5c75381918ce9e2bf78f9d4a0f9d66d118ad02b8/R/reportUtils.R)
GENE_ID="genesymbol" # see options with listIdType()
interestingGeneMap <- loadInterestGene(organism='hsapiens',
dataType="list",
inputGeneFile='/Users/test/projects/llfs_module_enrichment/outputs/parsedPascalOutput/twas/BMI/significant/twas_BMI_coexpression_66.txt',
geneType=GENE_ID,
geneSet=geneSet)
?filter
?idMapping
idMapping(organism='hsapiens',
dataType='list',
inputGeneFile='/Users/test/projects/llfs_module_enrichment/outputs/parsedPascalOutput/twas/BMI/significant/twas_BMI_coexpression_66.txt',
sourceIdType=GENE_ID,
targetIdType=NULL,
mappingOutput=FALSE)
interestingGeneMap <- loadInterestGene(organism='hsapiens',
dataType="list",
inputGeneFile='./outputs/log/allGenes.txt',
geneType=GENE_ID,
geneSet=geneSet)
idMapping(organism='hsapiens',
dataType='list',
inputGeneFile='./outputs/log/allGenes.txt',
sourceIdType=GENE_ID,
targetIdType=NULL,
mappingOutput=FALSE)
map <- idMapping(organism='hsapiens',
dataType='list',
inputGeneFile='./outputs/log/allGenes.txt',
sourceIdType=GENE_ID,
targetIdType=NULL,
mappingOutput=FALSE)
head(map)
map$unmapped
for(unmappedGene in map$unmapped){
print(unmappedGene)
}
fileConn <- file("unmappedGenes.txt")
for(unmappedGene in map$unmapped){
writeLines(unmappedGene)
}
close(fileConn)
getwd()
setwd("/Users/test/projects/llfs_module_enrichment")
fileConn <- file("unmappedGenes.txt")
for(unmappedGene in map$unmapped){
writeLines(unmappedGene, fileConn)
}
close(fileConn)
fileConn <- file("unmappedGenes.txt")
writeLines(map$unmapped, fileConn)
close(fileConn)
