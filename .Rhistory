# perform enrichment analysis
enrich_df <- WebGestaltR(
enrichMethod = METHOD,
organism = "hsapiens",
enrichDatabase = DATABASE,
interestGeneFile = file.path(INPUT_PATH, file_name),
interestGeneType = GENE_ID,
referenceGeneFile = file.path(REFERENCE_PATH, list.files(REFERENCE_PATH)[ref_index]),
referenceGeneType = GENE_ID,
minNum = 10, # default 10
maxNum = 500, # default 500
reportNum = 20, # default 20
isOutput = GENERATE_REPORT,
outputDirectory = REPORTS_PATH,
projectName = tf_method
)
# save summary as a .csv file
if (!is.null(enrich_df)) {
sig_df <- subset(enrich_df, select = -c(link))
if (nrow(sig_df) > 0) {
sig_df['database'] <- rep(DATABASE, nrow(sig_df))
write.csv(sig_df,file.path(SUMMARIES_PATH,PROJECT_NAME,paste0(tf_method,"_summary.csv")),row.names = FALSE)
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,PROJECT_NAME,paste0(tf_method,"_summary.csv")),row.names = FALSE)
}
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,PROJECT_NAME,paste0(tf_method,"_summary.csv")),row.names = FALSE)
}
}
} else {
print("INPUT NOT FOUND")
}
list.files(INPUT_PATH)
library("WebGestaltR")
setwd("/Users/test/projects/llfs_module_enrichment")
# PROJECT_NAME names summary folder, reports folders will be "Project_"NAME_METHOD
PROJECT_NAME="test_run_02272023"
METHOD="ORA" # ORA | GSEA | NTA
DATABASE="geneontology_Biological_Process" # "geneontology_Biological_Process "geneontology_Molecular_Function" # see options with listGeneSet()
GENE_ID="genesymbol" # see options with listIdType()
INPUT_PATH="./outputs/parsedPascalOutput/staar/ABI/significant" # path to folder of module genes
REFERENCE_PATH="./outputs/GOinput/staar/ABI" # path to folder of background gene lists
# reports are more in-depth than summaries - advisable to keep reports FALSE if not needed
REPORTS_PATH="./outputs/GO_results" # only used if GENERATE_REPORT=TRUE
SUMMARIES_PATH="./outputs/GO_summaries" # will be created if does not exist
GENERATE_REPORT=FALSE
# path must exist even if GENERATE_REPORT=FALSE
if (!dir.exists(REPORTS_PATH)) {
dir.create(REPORTS_PATH, recursive=TRUE)
}
if (!dir.exists(file.path(SUMMARIES_PATH, PROJECT_NAME))) {
dir.create(file.path(SUMMARIES_PATH, PROJECT_NAME), recursive=TRUE)
}
ref_list = list.files(REFERENCE_PATH)
ref_list
ref_list_idents = lapply(ref_list, function(x) unlist(strsplit(x, '[.]'))[1]) # get list of module index
ref_list_idents
list.files(INPUT_PATH)
file_name = staar_ABI_ppi2_14.txt
file_name = 'staar_ABI_ppi2_14.txt'
name = unlist(strsplit(file_name, '.txt'))[1]
name
tf_method = paste0(name, '_', METHOD)
tf_method
ident = unlist(strsplit(file_name, '[.]'))[1]
ident
ref_index = which(ident == ref_list_idents)[1]
ref_index
ref_list_idents
ident
file_name
ref_list_idents
ref_list
name
tf_method
ident
ref_list_idents
strsplit(file_name, '[.]')
unlist(strsplit(file_name, '[.]'))
unlist(strsplit(file_name, '[_]'))
paste(unlist(strsplit(file_name, '[_]'))[1:-1], sep="_")
strsplit(file_name , '_')
paste(strsplit(file_name, '_'), sep='_')
paste(unlist(strsplit(file_name, '_')), sep='_')
str_replace(file_name, "_[0-9].txt", "")
library(stringr)
str_replace(file_name, "_[0-9].txt", "")
str_replace(file_name, "_[0-9*].txt", "")
str_replace(file_name, "^_[0-9*].txt", "")
str_replace(file_name, "^_[0-9].txt", "")
str_replace(file_name, "^_[*].txt", "")
str_replace(file_name, "^_[.*].txt", "")
strsplit(file_name)
strsplit(file_name, '_')
unlist(strsplit(file_name, '_')
)
unlist(strsplit(file_name, '_'))[1:3]
paste(unlist(strsplit(file_name, '_'))[1:3], sep="_")
help("unlist")
paste(c(unlist(strsplit(file_name, '_'))[1:3]), sep="_")
paste(c(unlist(strsplit(file_name, '_'))[1:3]), collapse="_")
paste(c(unlist(strsplit(file_name, '_'))[1:-1]), collapse="_")
name
#!/usr/bin/env Rscript
## TO USE:
## need one folder containing the gene lists of interest
## need another folder containing their reference gene lists
## all gene list files should be single-column .txt
## input-reference list pairs must share the first '.'-separated word of their names
## output files are named based on the first '_'-separated word of the input
## change FIELDS to desired name, method, database, gene id format, input folder, and gene universe folder
## data on the terms with significant overlap will be in SUMMARIES_PATH if such terms exist
library("WebGestaltR")
library(stringr)
setwd("/Users/test/projects/llfs_module_enrichment")
# PROJECT_NAME names summary folder, reports folders will be "Project_"NAME_METHOD
PROJECT_NAME="test_run_02272023"
METHOD="ORA" # ORA | GSEA | NTA
DATABASE="geneontology_Biological_Process" # "geneontology_Biological_Process "geneontology_Molecular_Function" # see options with listGeneSet()
GENE_ID="genesymbol" # see options with listIdType()
INPUT_PATH="./outputs/parsedPascalOutput/staar/ABI/significant" # path to folder of module genes
REFERENCE_PATH="./outputs/GOinput/staar/ABI" # path to folder of background gene lists
# reports are more in-depth than summaries - advisable to keep reports FALSE if not needed
REPORTS_PATH="./outputs/GO_results" # only used if GENERATE_REPORT=TRUE
SUMMARIES_PATH="./outputs/GO_summaries" # will be created if does not exist
GENERATE_REPORT=FALSE
# path must exist even if GENERATE_REPORT=FALSE
if (!dir.exists(REPORTS_PATH)) {
dir.create(REPORTS_PATH, recursive=TRUE)
}
if (!dir.exists(file.path(SUMMARIES_PATH, PROJECT_NAME))) {
dir.create(file.path(SUMMARIES_PATH, PROJECT_NAME), recursive=TRUE)
}
if (dir.exists(INPUT_PATH) & dir.exists(REFERENCE_PATH)) {
# used to pair input with reference
ref_list = list.files(REFERENCE_PATH)
ref_list_idents = lapply(ref_list, function(x) unlist(strsplit(x, '[.]'))[1]) # get background set file
for (file_name in list.files(INPUT_PATH)) {
# get name for input file
name = unlist(strsplit(file_name, '.txt'))[1]
tf_method = paste0(name, '_', METHOD)
# find proper reference list
ident = paste(c(unlist(strsplit(file_name, '_'))[1:3]), collapse="_")
ref_index = which(ident == ref_list_idents)[1]
# perform enrichment analysis
enrich_df <- WebGestaltR(
enrichMethod = METHOD,
organism = "hsapiens",
enrichDatabase = DATABASE,
interestGeneFile = file.path(INPUT_PATH, file_name),
interestGeneType = GENE_ID,
referenceGeneFile = file.path(REFERENCE_PATH, list.files(REFERENCE_PATH)[ref_index]),
referenceGeneType = GENE_ID,
minNum = 10, # default 10
maxNum = 500, # default 500
reportNum = 20, # default 20
isOutput = GENERATE_REPORT,
outputDirectory = REPORTS_PATH,
projectName = tf_method
)
# save summary as a .csv file
if (!is.null(enrich_df)) {
sig_df <- subset(enrich_df, select = -c(link))
if (nrow(sig_df) > 0) {
sig_df['database'] <- rep(DATABASE, nrow(sig_df))
write.csv(sig_df,file.path(SUMMARIES_PATH,PROJECT_NAME,paste0(tf_method,"_summary.csv")),row.names = FALSE)
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,PROJECT_NAME,paste0(tf_method,"_summary.csv")),row.names = FALSE)
}
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,PROJECT_NAME,paste0(tf_method,"_summary.csv")),row.names = FALSE)
}
}
} else {
print("INPUT NOT FOUND")
}
name
help(WebGestaltR)
ref_index
ref_list_idents
file.path(SUMMARIES_PATH, PROJECT_NAME)
list.dirs("./outputs/GOinput/staar", full.names=FALSE, recursive=FALSE)
for (STUDY in STUDIES) {
INPUT_PATH = file.path(MODULEFILEROOT, STUDY, TRAIT, 'significant')
REFERENCE_PATH = file.path(BACKGROUNDROOT, STUDY, TRAIT) # path to folder of background gene lists
# reports are more in-depth than summaries - advisable to keep reports FALSE if not needed
# REPORTS_PATH= file.path(SUMMARYROOT, STUDY, TRAIT) # only used if GENERATE_REPORT=TRUE
SUMMARIES_PATH=file.path(SUMMARYROOT, STUDY, TRAIT) # will be created if does not exist
GENERATE_REPORT=FALSE
# path must exist even if GENERATE_REPORT=FALSE
if (!dir.exists(REPORTS_PATH)) {
dir.create(REPORTS_PATH, recursive=TRUE)
}
if (!dir.exists(SUMMARIES_PATH)) {
dir.create(file.path(SUMMARIES_PATH, PROJECT_NAME), recursive=TRUE)
}
if (dir.exists(INPUT_PATH) & dir.exists(REFERENCE_PATH)) {
# used to pair input with reference
ref_list = list.files(REFERENCE_PATH)
ref_list_idents = lapply(ref_list, function(x) unlist(strsplit(x, '[.]'))[1]) # get background set file
for (file_name in list.files(INPUT_PATH)) {
# get name for input file
name = unlist(strsplit(file_name, '.txt'))[1]
tf_method = paste0(name, '_', METHOD)
# find proper reference list
ident = paste(c(unlist(strsplit(file_name, '_'))[1:3]), collapse="_")
ref_index = which(ident == ref_list_idents)[1]
# perform enrichment analysis
enrich_df <- WebGestaltR(
enrichMethod = METHOD,
organism = "hsapiens",
enrichDatabase = DATABASE,
interestGeneFile = file.path(INPUT_PATH, file_name),
interestGeneType = GENE_ID,
referenceGeneFile = file.path(REFERENCE_PATH, list.files(REFERENCE_PATH)[ref_index]),
referenceGeneType = GENE_ID,
minNum = 10, # default 10
maxNum = 500, # default 500
reportNum = 20, # default 20
isOutput = GENERATE_REPORT,
outputDirectory = REPORTS_PATH,
projectName = tf_method
)
# save summary as a .csv file
if (!is.null(enrich_df)) {
sig_df <- subset(enrich_df, select = -c(link))
if (nrow(sig_df) > 0) {
sig_df['database'] <- rep(DATABASE, nrow(sig_df))
write.csv(sig_df,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
}
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
}
}
} else {
print("INPUT NOT FOUND")
}
}
#!/usr/bin/env Rscript
## TO USE:
## need one folder containing the gene lists of interest
## need another folder containing their reference gene lists
## all gene list files should be single-column .txt
## input-reference list pairs must share the first '.'-separated word of their names
## output files are named based on the first '_'-separated word of the input
## change FIELDS to desired name, method, database, gene id format, input folder, and gene universe folder
## data on the terms with significant overlap will be in SUMMARIES_PATH if such terms exist
library("WebGestaltR")
library(stringr)
setwd("/Users/test/projects/llfs_module_enrichment")
# Things to change
STUDIES = c('staar', 'twas')
MODULEFILEROOT = "./outputs/parsedPascalOutput/"
BACKGROUNDROOT = "./outputs/GOinput/"
SUMMARYROOT = "./outputs/GO_summaries"
REPORTROOT = "./outputs/GO_reports"
METHOD="ORA" # ORA | GSEA | NTA
DATABASES=c("geneontology_Biological_Process", "geneontology_Molecular_Function") # "geneontology_Biological_Process "geneontology_Molecular_Function" # see options with listGeneSet()
GENE_ID="genesymbol" # see options with listIdType()
for (STUDY in STUDIES) {
TRAITS = list.dirs(file.path(BACKGROUNDROOT, STUDY), full.names=FALSE, recursive=FALSE)
for (TRAIT in TRAITS) {
for (DATABASE in DATABASES) {
INPUT_PATH = file.path(MODULEFILEROOT, STUDY, TRAIT, 'significant')
REFERENCE_PATH = file.path(BACKGROUNDROOT, STUDY, TRAIT) # path to folder of background gene lists
# reports are more in-depth than summaries - advisable to keep reports FALSE if not needed
REPORTS_PATH= file.path(REPORTROOT, STUDY, TRAIT, DATABASE) # only used if GENERATE_REPORT=TRUE
SUMMARIES_PATH=file.path(SUMMARYROOT, STUDY, TRAIT, DATABASE) # will be created if does not exist
GENERATE_REPORT=FALSE
# path must exist even if GENERATE_REPORT=FALSE
if (!dir.exists(REPORTS_PATH)) {
dir.create(REPORTS_PATH, recursive=TRUE)
}
if (!dir.exists(SUMMARIES_PATH)) {
dir.create(file.path(SUMMARIES_PATH, PROJECT_NAME), recursive=TRUE)
}
if (dir.exists(INPUT_PATH) & dir.exists(REFERENCE_PATH)) {
# used to pair input with reference
ref_list = list.files(REFERENCE_PATH)
ref_list_idents = lapply(ref_list, function(x) unlist(strsplit(x, '[.]'))[1]) # get background set file
for (file_name in list.files(INPUT_PATH)) {
# get name for input file
name = unlist(strsplit(file_name, '.txt'))[1]
tf_method = paste0(name, '_', METHOD)
# find proper reference list
ident = paste(c(unlist(strsplit(file_name, '_'))[1:3]), collapse="_")
ref_index = which(ident == ref_list_idents)[1]
# perform enrichment analysis
enrich_df <- WebGestaltR(
enrichMethod = METHOD,
organism = "hsapiens",
enrichDatabase = DATABASE,
interestGeneFile = file.path(INPUT_PATH, file_name),
interestGeneType = GENE_ID,
referenceGeneFile = file.path(REFERENCE_PATH, list.files(REFERENCE_PATH)[ref_index]),
referenceGeneType = GENE_ID,
minNum = 10, # default 10
maxNum = 500, # default 500
reportNum = 20, # default 20
isOutput = GENERATE_REPORT,
outputDirectory = REPORTS_PATH,
projectName = tf_method
)
# save summary as a .csv file
if (!is.null(enrich_df)) {
sig_df <- subset(enrich_df, select = -c(link))
if (nrow(sig_df) > 0) {
sig_df['database'] <- rep(DATABASE, nrow(sig_df))
write.csv(sig_df,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
}
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
}
}
} else {
print("INPUT NOT FOUND")
}
}
}
}
#!/usr/bin/env Rscript
## TO USE:
## need one folder containing the gene lists of interest
## need another folder containing their reference gene lists
## all gene list files should be single-column .txt
## input-reference list pairs must share the first '.'-separated word of their names
## output files are named based on the first '_'-separated word of the input
## change FIELDS to desired name, method, database, gene id format, input folder, and gene universe folder
## data on the terms with significant overlap will be in SUMMARIES_PATH if such terms exist
library("WebGestaltR")
library(stringr)
setwd("/Users/test/projects/llfs_module_enrichment")
# Things to change
STUDIES = c('staar', 'twas')
MODULEFILEROOT = "./outputs/parsedPascalOutput/"
BACKGROUNDROOT = "./outputs/GOinput/"
SUMMARYROOT = "./outputs/GO_summaries"
REPORTROOT = "./outputs/GO_reports"
# WebGestalt parameters
METHOD="ORA" # ORA | GSEA | NTA
DATABASES=c("geneontology_Biological_Process", "geneontology_Molecular_Function") # "geneontology_Biological_Process "geneontology_Molecular_Function" # see options with listGeneSet()
GENE_ID="genesymbol" # see options with listIdType()
for (STUDY in STUDIES) {
TRAITS = list.dirs(file.path(BACKGROUNDROOT, STUDY), full.names=FALSE, recursive=FALSE)
for (TRAIT in TRAITS) {
for (DATABASE in DATABASES) {
INPUT_PATH = file.path(MODULEFILEROOT, STUDY, TRAIT, 'significant')
REFERENCE_PATH = file.path(BACKGROUNDROOT, STUDY, TRAIT) # path to folder of background gene lists
# reports are more in-depth than summaries - advisable to keep reports FALSE if not needed
REPORTS_PATH= file.path(REPORTROOT, STUDY, TRAIT, DATABASE) # only used if GENERATE_REPORT=TRUE
SUMMARIES_PATH=file.path(SUMMARYROOT, STUDY, TRAIT, DATABASE) # will be created if does not exist
GENERATE_REPORT=FALSE
# path must exist even if GENERATE_REPORT=FALSE
if (!dir.exists(REPORTS_PATH)) {
dir.create(REPORTS_PATH, recursive=TRUE)
}
if (!dir.exists(SUMMARIES_PATH)) {
dir.create(SUMMARIES_PATH, recursive=TRUE)
}
if (dir.exists(INPUT_PATH) & dir.exists(REFERENCE_PATH)) {
# used to pair input with reference
ref_list = list.files(REFERENCE_PATH)
ref_list_idents = lapply(ref_list, function(x) unlist(strsplit(x, '[.]'))[1]) # get background set file
for (file_name in list.files(INPUT_PATH)) {
# get name for input file
name = unlist(strsplit(file_name, '.txt'))[1]
tf_method = paste0(name, '_', METHOD)
# find proper reference list
ident = paste(c(unlist(strsplit(file_name, '_'))[1:3]), collapse="_")
ref_index = which(ident == ref_list_idents)[1]
# perform enrichment analysis
enrich_df <- WebGestaltR(
enrichMethod = METHOD,
organism = "hsapiens",
enrichDatabase = DATABASE,
interestGeneFile = file.path(INPUT_PATH, file_name),
interestGeneType = GENE_ID,
referenceGeneFile = file.path(REFERENCE_PATH, list.files(REFERENCE_PATH)[ref_index]),
referenceGeneType = GENE_ID,
minNum = 10, # default 10
maxNum = 500, # default 500
reportNum = 20, # default 20
isOutput = GENERATE_REPORT,
outputDirectory = REPORTS_PATH,
projectName = tf_method
)
# save summary as a .csv file
if (!is.null(enrich_df)) {
sig_df <- subset(enrich_df, select = -c(link))
if (nrow(sig_df) > 0) {
sig_df['database'] <- rep(DATABASE, nrow(sig_df))
write.csv(sig_df,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
}
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
}
}
} else {
print("INPUT NOT FOUND")
}
}
}
}
#!/usr/bin/env Rscript
## TO USE:
## need one folder containing the gene lists of interest
## need another folder containing their reference gene lists
## all gene list files should be single-column .txt
## input-reference list pairs must share the first '.'-separated word of their names
## output files are named based on the first '_'-separated word of the input
## change FIELDS to desired name, method, database, gene id format, input folder, and gene universe folder
## data on the terms with significant overlap will be in SUMMARIES_PATH if such terms exist
library("WebGestaltR")
library(stringr)
setwd("/Users/test/projects/llfs_module_enrichment")
# Things to change
STUDIES = c('twas')
MODULEFILEROOT = "./outputs/parsedPascalOutput/"
BACKGROUNDROOT = "./outputs/GOinput/"
SUMMARYROOT = "./outputs/GO_summaries"
REPORTROOT = "./outputs/GO_reports"
# WebGestalt parameters
METHOD="ORA" # ORA | GSEA | NTA
DATABASES=c("geneontology_Biological_Process", "geneontology_Molecular_Function") # "geneontology_Biological_Process "geneontology_Molecular_Function" # see options with listGeneSet()
GENE_ID="genesymbol" # see options with listIdType()
for (STUDY in STUDIES) {
TRAITS = list.dirs(file.path(BACKGROUNDROOT, STUDY), full.names=FALSE, recursive=FALSE)
for (TRAIT in TRAITS) {
for (DATABASE in DATABASES) {
INPUT_PATH = file.path(MODULEFILEROOT, STUDY, TRAIT, 'significant')
REFERENCE_PATH = file.path(BACKGROUNDROOT, STUDY, TRAIT) # path to folder of background gene lists
# reports are more in-depth than summaries - advisable to keep reports FALSE if not needed
REPORTS_PATH= file.path(REPORTROOT, STUDY, TRAIT, DATABASE) # only used if GENERATE_REPORT=TRUE
SUMMARIES_PATH=file.path(SUMMARYROOT, STUDY, TRAIT, DATABASE) # will be created if does not exist
GENERATE_REPORT=FALSE
# path must exist even if GENERATE_REPORT=FALSE
if (!dir.exists(REPORTS_PATH)) {
dir.create(REPORTS_PATH, recursive=TRUE)
}
if (!dir.exists(SUMMARIES_PATH)) {
dir.create(SUMMARIES_PATH, recursive=TRUE)
}
if (dir.exists(INPUT_PATH) & dir.exists(REFERENCE_PATH)) {
# used to pair input with reference
ref_list = list.files(REFERENCE_PATH)
ref_list_idents = lapply(ref_list, function(x) unlist(strsplit(x, '[.]'))[1]) # get background set file
for (file_name in list.files(INPUT_PATH)) {
# get name for input file
name = unlist(strsplit(file_name, '.txt'))[1]
tf_method = paste0(name, '_', METHOD)
# find proper reference list. ASSUMPTION: file name is <study>_<trait>_<network>_<moduleIndex>.txt
ident = paste(c(unlist(strsplit(file_name, '_'))[1:3]), collapse="_")
ref_index = which(ident == ref_list_idents)[1]
tryCatch(
# perform enrichment analysis
enrich_df <- WebGestaltR(
enrichMethod = METHOD,
organism = "hsapiens",
enrichDatabase = DATABASE,
interestGeneFile = file.path(INPUT_PATH, file_name),
interestGeneType = GENE_ID,
referenceGeneFile = file.path(REFERENCE_PATH, list.files(REFERENCE_PATH)[ref_index]),
referenceGeneType = GENE_ID,
minNum = 10, # default 10
maxNum = 500, # default 500
reportNum = 20, # default 20
isOutput = GENERATE_REPORT,
outputDirectory = REPORTS_PATH,
projectName = tf_method
),
error = function(e){
print(paste0("ERROR while running WebGestalt for ", STUDY, TRAIT, DATABASE))
enrich_df = NULL
}
)
# save summary as a .csv file
if (!is.null(enrich_df)) {
sig_df <- subset(enrich_df, select = -c(link))
if (nrow(sig_df) > 0) {
sig_df['database'] <- rep(DATABASE, nrow(sig_df))
write.csv(sig_df,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
}
} else {
print("NO SIGNIFICANT OVERLAPS")
write.csv(NULL,file.path(SUMMARIES_PATH,paste0(name,".csv")),row.names = FALSE)
}
}
} else {
print("INPUT NOT FOUND")
}
}
}
}
